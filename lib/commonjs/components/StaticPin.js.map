{"version":3,"sources":["StaticPin.tsx"],"names":["StaticPin","staticPinPosition","pinAnim","staticPinIcon","pinSize","onParentMove","onPress","onLongPress","setPinSize","pinProps","tapTime","React","useRef","transform","translateY","height","translateX","width","getTranslateTransform","opacity","panResponder","PanResponder","create","onStartShouldSetPanResponder","current","Date","now","onPanResponderMove","evt","gestureState","Math","abs","dx","dy","onPanResponderRelease","dt","left","x","top","y","styles","pinWrapper","nativeEvent","layout","panHandlers","require","pin","StyleSheet","position"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  Animated,\n  View,\n  Image,\n  StyleSheet,\n  GestureResponderEvent,\n  PanResponderGestureState,\n  PanResponder,\n  ViewProps,\n} from 'react-native';\nimport { Size2D } from 'src/typings';\n\nexport const StaticPin = ({\n  staticPinPosition,\n  pinAnim,\n  staticPinIcon,\n  pinSize,\n  onParentMove,\n  onPress,\n  onLongPress,\n  setPinSize,\n  pinProps = {},\n}: {\n  staticPinPosition: { x: number; y: number };\n  pinAnim: Animated.ValueXY;\n  staticPinIcon: React.ReactNode;\n  pinSize: Size2D;\n  /** Internal handler for passing move event to parent */\n  onParentMove: (\n    evt: GestureResponderEvent,\n    gestureState: PanResponderGestureState\n  ) => boolean;\n  onPress?: (evt: GestureResponderEvent) => void;\n  onLongPress?: (evt: GestureResponderEvent) => void;\n  setPinSize: (size: Size2D) => void;\n  pinProps?: ViewProps;\n}) => {\n  const tapTime = React.useRef(0);\n  const transform = [\n    { translateY: -pinSize.height },\n    { translateX: -pinSize.width / 2 },\n    ...pinAnim.getTranslateTransform(),\n  ];\n\n  const opacity = pinSize.width && pinSize.height ? 1 : 0;\n\n  const panResponder = React.useRef(\n    PanResponder.create({\n      onStartShouldSetPanResponder: () => {\n        tapTime.current = Date.now();\n\n        // We want to handle tap on this so set true\n        return true;\n      },\n      onPanResponderMove: (evt, gestureState) => {\n        // However if the user moves finger we want to pass this evt to parent\n        // to handle panning (tap not recognized)\n        if (Math.abs(gestureState.dx) > 5 && Math.abs(gestureState.dy) > 5)\n          onParentMove(evt, gestureState);\n      },\n      onPanResponderRelease: (evt, gestureState) => {\n        if (Math.abs(gestureState.dx) > 5 || Math.abs(gestureState.dy) > 5)\n          return;\n        const dt = Date.now() - tapTime.current;\n        if (onPress && dt < 500) {\n          onPress(evt);\n        }\n        if (onLongPress && dt > 500) {\n          // RN long press is 500ms\n          onLongPress(evt);\n        }\n      },\n    })\n  ).current;\n\n  return (\n    <Animated.View\n      style={[\n        staticPinPosition && {\n          left: staticPinPosition.x,\n          top: staticPinPosition.y,\n        },\n        styles.pinWrapper,\n        { opacity, transform },\n      ]}\n      {...pinProps}\n    >\n      <View\n        onLayout={({ nativeEvent: { layout } }) => setPinSize(layout)}\n        {...panResponder.panHandlers}\n      >\n        {staticPinIcon || (\n          <Image source={require('../assets/pin.png')} style={styles.pin} />\n        )}\n      </View>\n    </Animated.View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  pinWrapper: {\n    position: 'absolute',\n  },\n  pin: {\n    width: 48,\n    height: 64,\n  },\n});\n"]}